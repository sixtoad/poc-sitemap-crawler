<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.sixtoad</groupId>
	<artifactId>sitemap-crawler-engine</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>sitemap crawler engine project</name>
	<description>Sixtoad super pom for sitemap crawler</description>
	<prerequisites>
		<maven>3.0.0</maven>
	</prerequisites>
	<scm>
		<url>https://github.com/sixtoad/poc-sitemap-crawler.git</url>
		<connection>scm:git:https://github.com/sixtoad/poc-sitemap-crawler.git</connection>
		<developerConnection>scm:git:ssh@github.com:sixtoad/poc-sitemap-crawler.git</developerConnection>
	</scm>
	<properties>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.java.version>1.8</project.java.version>
		<project.execution.environment>JavaSE-1.8</project.execution.environment>
		<lombok.version>1.16.6</lombok.version>
		<commons-csv.version>1.1</commons-csv.version>
		<!-- use 3.2.0 for Java 8 projects -->
		<assertj-core.version>3.2.0</assertj-core.version>
		<mockito-all.version>1.9.5</mockito-all.version>
		<test-maven-lombok.version>1.16.6.1</test-maven-lombok.version>
		<springfox-swagger2.version>2.4.0</springfox-swagger2.version>
		<springfox-swagger-ui.version>2.4.0</springfox-swagger-ui.version>
		<wiremock.version>1.58</wiremock.version>
		<sonar-jacoco-listeners.version>3.2</sonar-jacoco-listeners.version>
		<tinytypes.version>1.1.0</tinytypes.version>
		<metrics-spring.version>3.1.3</metrics-spring.version>
		<spring-session.version>1.2.1.RELEASE</spring-session.version>
		<spring-statemachine.version>1.1.1.RELEASE</spring-statemachine.version>
		<metrics.version>3.1.2</metrics.version>
		<pact-jvm-junit.version>3.2.9</pact-jvm-junit.version>
		<junit.version>4.12</junit.version>
		<guava.version>20.0</guava.version>
		<asciidoctor.maven.plugin.version>1.5.3</asciidoctor.maven.plugin.version>
		<asciidoctorj.pdf.version>1.5.0-alpha.11</asciidoctorj.pdf.version>
		<asciidoctorj.version>1.5.4</asciidoctorj.version>
		<asciidoctorj.diagram.version>1.3.1</asciidoctorj.diagram.version>
		<jruby.version>1.7.21</jruby.version>
		<commons-lang3.version>3.4</commons-lang3.version>
		<pi-test-plugin.version>1.1.10</pi-test-plugin.version>
		<jacoco-plugin.version>0.7.7.201606060606</jacoco-plugin.version>
		<compiler-plugin.version>3.5.1</compiler-plugin.version>
		<sonar-plugin.version>3.0.1</sonar-plugin.version>
		<commons-io.version>2.4</commons-io.version>
		<commons-validator.version>1.5.0</commons-validator.version>
		<wiremock-body-transformer.version>1.0.8</wiremock-body-transformer.version>
		<joda-money.version>0.11</joda-money.version>
		<oracle.version>14</oracle.version>
		<ms-sql.version>4.0</ms-sql.version>
		<mockrunner.version>1.1.1</mockrunner.version>
		<maven-war-plugin.version>2.6</maven-war-plugin.version>
		<spring-boot-legacy.version>1.0.2.RELEASE</spring-boot-legacy.version>
		<spring-boot.version>1.4.2.RELEASE</spring-boot.version>
		<dependency-check-maven.version>1.4.3</dependency-check-maven.version>
		<gmavenplus-plugin.version>1.5</gmavenplus-plugin.version>
		<spring-cloud-contract-dependencies.version>1.0.2.RELEASE</spring-cloud-contract-dependencies.version>
		<jaxws-rt.version>2.2.10</jaxws-rt.version>
	</properties>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-parent</artifactId>
				<version>${spring-boot.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<version>${lombok.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-csv</artifactId>
				<version>${commons-csv.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-validator</groupId>
				<artifactId>commons-validator</artifactId>
				<version>${commons-validator.version}</version>
			</dependency>
			<dependency>
				<groupId>org.assertj</groupId>
				<artifactId>assertj-core</artifactId>
				<version>${assertj-core.version}</version>
			</dependency>
			<dependency>
				<groupId>org.mockito</groupId>
				<artifactId>mockito-all</artifactId>
				<version>${mockito-all.version}</version>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger2</artifactId>
				<version>${springfox-swagger2.version}</version>
			</dependency>
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger-ui</artifactId>
				<version>${springfox-swagger-ui.version}</version>
			</dependency>
			<dependency>
				<groupId>com.github.tomakehurst</groupId>
				<artifactId>wiremock</artifactId>
				<version>${wiremock.version}</version>
				<!-- Include everything below here if you have dependency conflicts -->
				<classifier>standalone</classifier>
				<exclusions>
					<exclusion>
						<groupId>org.mortbay.jetty</groupId>
						<artifactId>jetty</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.google.guava</groupId>
						<artifactId>guava</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.fasterxml.jackson.core</groupId>
						<artifactId>jackson-core</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.fasterxml.jackson.core</groupId>
						<artifactId>jackson-annotations</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.fasterxml.jackson.core</groupId>
						<artifactId>jackson-databind</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.apache.httpcomponents</groupId>
						<artifactId>httpclient</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.skyscreamer</groupId>
						<artifactId>jsonassert</artifactId>
					</exclusion>
					<exclusion>
						<groupId>xmlunit</groupId>
						<artifactId>xmlunit</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.jayway.jsonpath</groupId>
						<artifactId>json-path</artifactId>
					</exclusion>
					<exclusion>
						<groupId>net.sf.jopt-simple</groupId>
						<artifactId>jopt-simple</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.codehaus.sonar-plugins.java</groupId>
				<artifactId>sonar-jacoco-listeners</artifactId>
				<version>${sonar-jacoco-listeners.version}</version>
			</dependency>
			<dependency>
				<groupId>tech.anima</groupId>
				<artifactId>tinytypes</artifactId>
				<version>${tinytypes.version}</version>
			</dependency>
			<dependency>
				<groupId>tech.anima</groupId>
				<artifactId>jackson-datatype-tinytypes</artifactId>
				<version>${tinytypes.version}</version>
			</dependency>
			<dependency>
				<groupId>tech.anima</groupId>
				<artifactId>tinytypes-jersey</artifactId>
				<version>${tinytypes.version}</version>
			</dependency>
			<dependency>
				<groupId>com.ryantenney.metrics</groupId>
				<artifactId>metrics-spring</artifactId>
				<version>${metrics-spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.session</groupId>
				<artifactId>spring-session-jdbc</artifactId>
				<version>${spring-session.version}</version>
				<type>pom</type>
			</dependency>
			<dependency>
				<groupId>org.springframework.statemachine</groupId>
				<artifactId>spring-statemachine-core</artifactId>
				<version>${spring-statemachine.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.statemachine</groupId>
				<artifactId>spring-statemachine-test</artifactId>
				<version>${spring-statemachine.version}</version>
			</dependency>
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-core</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<dependency>
				<groupId>au.com.dius</groupId>
				<artifactId>pact-jvm-consumer-junit_2.11</artifactId>
				<version>${pact-jvm-junit.version}</version>
			</dependency>
			<dependency>
				<groupId>au.com.dius</groupId>
				<artifactId>pact-jvm-provider-junit_2.11</artifactId>
				<version>${pact-jvm-junit.version}</version>
			</dependency>
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons-lang3.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>
			<dependency>
				<groupId>au.com.dius</groupId>
				<artifactId>pact-jvm-matchers_2.11</artifactId>
				<version>${pact-jvm-junit.version}</version>
			</dependency>
			<dependency>
				<groupId>com.opentable</groupId>
				<artifactId>wiremock-body-transformer</artifactId>
				<version>${wiremock-body-transformer.version}</version>
				<exclusions>
					<exclusion>
						<groupId>com.github.tomakehurst</groupId>
						<artifactId>wiremock</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.fasterxml.jackson.dataformat</groupId>
						<artifactId>jackson-dataformat-xml</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.fasterxml.jackson.core</groupId>
						<artifactId>jackson-databind</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.joda</groupId>
				<artifactId>joda-money</artifactId>
				<version>${joda-money.version}</version>
			</dependency>
			<dependency>
				<groupId>oracle</groupId>
				<artifactId>ojdbc</artifactId>
				<version>${oracle.version}</version>
			</dependency>
			<dependency>
				<groupId>com.microsoft.sqlserver</groupId>
				<artifactId>sqljdbc4</artifactId>
				<version>${ms-sql.version}</version>
			</dependency>
			<dependency>
				<groupId>com.mockrunner</groupId>
				<artifactId>mockrunner-jms</artifactId>
				<version>${mockrunner.version}</version>
			</dependency>
			<dependency>
				<groupId>com.mockrunner</groupId>
				<artifactId>mockrunner-jdbc</artifactId>
				<version>${mockrunner.version}</version>
			</dependency>
			<dependency>
				<groupId>com.mockrunner</groupId>
				<artifactId>mockrunner-jms-spring</artifactId>
				<version>${mockrunner.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-legacy</artifactId>
				<version>${spring-boot-legacy.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-contract-dependencies</artifactId>
				<version>${spring-cloud-contract-dependencies.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.sun.xml.ws</groupId>
				<artifactId>jaxws-rt</artifactId>
				<version>${jaxws-rt.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.athaydes</groupId>
			<artifactId>spock-reports</artifactId>
			<version>1.2.13</version>
			<scope>test</scope>
			<!-- this avoids affecting your version of Groovy/Spock -->
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.spockframework</groupId>
			<artifactId>spock-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency> <!-- enables mocking of classes (in addition to interfaces) -->
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>3.1</version>
			<scope>test</scope>
		</dependency>
		<dependency> <!-- enables mocking of classes without default constructor (together with 
				CGLIB) -->
			<groupId>org.objenesis</groupId>
			<artifactId>objenesis</artifactId>
			<version>2.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>org.codehaus.sonar-plugins.java</groupId>
			<artifactId>sonar-jacoco-listeners</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
	</dependencies>
	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<argLine>${surefireArgLine}</argLine>
					<skipTests>${skip.unit.tests}</skipTests>
					<includes>
						<!-- unit tests -->
						<include>**/*UT.java</include>
						<!-- configuration tests -->
						<include>**/*CT.java</include>
					</includes>
					<properties>
						<property>
							<name>listener</name>
							<value>org.sonar.java.jacoco.JUnitListener</value>
						</property>
					</properties>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<configuration>
					<argLine>${failsafeArgLine}</argLine>
					<skipTests>${skip.integration.tests}</skipTests>
					<includes>
						<!-- Integration test -->
						<include>**/*IT.java</include>
						<!-- Spock integration test -->
						<include>**/*Spec.java</include>
						<!-- Documentation test -->
						<include>**/*DT.java</include>
					</includes>
					<excludes>
						<!-- Spock integration test -->
						<exclude>**/*Abstract*.java</exclude>
					</excludes>
					<properties>
						<property>
							<name>listener</name>
							<value>org.sonar.java.jacoco.JUnitListener</value>
						</property>
					</properties>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${project.java.version}</source>
					<target>${project.java.version}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.gmavenplus</groupId>
				<artifactId>gmavenplus-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>addTestSources</goal>
							<goal>testGenerateStubs</goal>
							<goal>testCompile</goal>
							<goal>removeTestStubs</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Surefire plugin is executed. -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${project.build.directory}/jacoco.exec</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${project.build.directory}/jacoco.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>
					<!-- The Executions required by unit tests are omitted. -->
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Failsafe plugin is executed. -->
					<execution>
						<id>pre-integration-test</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${project.build.directory}/jacoco-it.exec</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>failsafeArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for integration tests after 
						integration tests have been run. -->
					<execution>
						<id>post-integration-test</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${project.build.directory}jacoco-it.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<delimiters>
						<delimiter>@</delimiter>
					</delimiters>
					<useDefaultDelimiters>false</useDefaultDelimiters>
				</configuration>
			</plugin>

		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.pitest</groupId>
					<artifactId>pitest-maven</artifactId>
					<version>${pi-test-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>${sonar-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-plugin.version}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${compiler-plugin.version}</version>
					<configuration>
						<compilerArgs>
							<arg>-parameters</arg>
						</compilerArgs>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-war-plugin</artifactId>
					<version>${maven-war-plugin.version}</version>
					<configuration>
						<failOnMissingWebXml>false</failOnMissingWebXml>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.owasp</groupId>
					<artifactId>dependency-check-maven</artifactId>
					<version>${dependency-check-maven.version}</version>
					<configuration>
						<skipProvidedScope>true</skipProvidedScope>
						<skipRuntimeScope>true</skipRuntimeScope>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.gmavenplus</groupId>
					<artifactId>gmavenplus-plugin</artifactId>
					<version>${gmavenplus-plugin.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.pitest</groupId>
						<artifactId>pitest-maven</artifactId>
						<executions>
							<execution>
								<id>currentChanges</id>
								<goals>
									<goal>scmMutationCoverage</goal>
								</goals>
								<configuration>
									<targetClasses>
										<param>ie.theaa.*</param>
									</targetClasses>
									<excludedClasses>
										<param>*IT</param>
										<param>*DT</param>
									</excludedClasses>
									<mutators>
										<mutator>ALL</mutator>
									</mutators>
									<threads>4</threads>
									<failWhenNoMutations>false</failWhenNoMutations>
									<analyseLastCommit>true</analyseLastCommit>
									<withHistory>true</withHistory>
									<avoidCallsTo>
										<avoidCallsTo>java.util.logging</avoidCallsTo>
										<avoidCallsTo>org.apache.log4j</avoidCallsTo>
										<avoidCallsTo>org.slf4j</avoidCallsTo>
										<avoidCallsTo>org.apache.commons</avoidCallsTo>
									</avoidCallsTo>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.owasp</groupId>
						<artifactId>dependency-check-maven</artifactId>
						<configuration>
							<format>ALL</format>
						</configuration>
						<executions>
							<execution>
								<phase>verify</phase>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.eclipse.m2e</groupId>
						<artifactId>lifecycle-mapping</artifactId>
						<version>1.0.0</version>
					</plugin>
				</plugins>
				
			</build>
		</profile>
		<profile>
			<id>dev-sonar</id>
			<properties>
				<sonar.language>java</sonar.language>
				<sonar.analysis.mode>preview</sonar.analysis.mode>
				<sonar.issuesReport.html.enable>true</sonar.issuesReport.html.enable>
				<sonar.issuesReport.console.enable>true</sonar.issuesReport.console.enable>
				<sonar.branch>${project.version}</sonar.branch>
				<sonar.pitest.mode>reuseReport</sonar.pitest.mode>
				<sonar.report.export.path>sonar-report.json</sonar.report.export.path>
				<sonar.host.url>http://192.168.99.100:32774</sonar.host.url>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>0.18.1</version>
						<configuration>
							<machine>
								<name>default</name>
								<autoCreate>true</autoCreate>
								<createOptions>
									<driver>virtualbox</driver>
									<virtualbox-cpu-count>2</virtualbox-cpu-count>
								</createOptions>
							</machine>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.pitest</groupId>
						<artifactId>pitest-maven</artifactId>
						<executions>
							<execution>
								<id>currentChanges</id>
								<goals>
									<goal>scmMutationCoverage</goal>
								</goals>
								<configuration>
									<targetClasses>
										<param>ie.theaa.*</param>
									</targetClasses>
									<excludedClasses>
										<param>*IT</param>
										<param>*DT</param>
									</excludedClasses>
									<mutators>
										<mutator>ALL</mutator>
									</mutators>
									<threads>4</threads>
									<failWhenNoMutations>false</failWhenNoMutations>
									<analyseLastCommit>true</analyseLastCommit>
									<withHistory>true</withHistory>
									<avoidCallsTo>
										<avoidCallsTo>java.util.logging</avoidCallsTo>
										<avoidCallsTo>org.apache.log4j</avoidCallsTo>
										<avoidCallsTo>org.slf4j</avoidCallsTo>
										<avoidCallsTo>org.apache.commons</avoidCallsTo>
									</avoidCallsTo>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.sonarsource.scanner.maven</groupId>
						<artifactId>sonar-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>verify</phase>
								<goals>
									<goal>sonar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.owasp</groupId>
						<artifactId>dependency-check-maven</artifactId>
						<configuration>
							<format>ALL</format>
						</configuration>
						<executions>
							<execution>
								<phase>verify</phase>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>docs</id>
			<activation>
				<file>
					<exists>src/docs/asciidoc</exists>
				</file>
			</activation>
			<build>
				<defaultGoal>process-resources</defaultGoal>
				<plugins>
					<plugin>
						<groupId>org.asciidoctor</groupId>
						<artifactId>asciidoctor-maven-plugin</artifactId>
						<version>${asciidoctor.maven.plugin.version}</version>
						<dependencies>
							<dependency>
								<groupId>org.asciidoctor</groupId>
								<artifactId>asciidoctorj-pdf</artifactId>
								<version>${asciidoctorj.pdf.version}</version>
							</dependency>
							<!-- Comment this section to use the default jruby artifact provided 
								by the plugin -->
							<dependency>
								<groupId>org.jruby</groupId>
								<artifactId>jruby-complete</artifactId>
								<version>${jruby.version}</version>
							</dependency>
							<!-- Comment this section to use the default AsciidoctorJ artifact 
								provided by the plugin -->
							<dependency>
								<groupId>org.asciidoctor</groupId>
								<artifactId>asciidoctorj</artifactId>
								<version>${asciidoctorj.version}</version>
							</dependency>
							<dependency>
								<groupId>org.asciidoctor</groupId>
								<artifactId>asciidoctorj-diagram</artifactId>
								<version>${asciidoctorj.diagram.version}</version>
							</dependency>
						</dependencies>
						<configuration>
							<sourceDirectory>src/docs/asciidoc</sourceDirectory>
							<!-- Attributes common to all output formats -->
							<attributes>
								<sourcedir>${project.build.sourceDirectory}</sourcedir>
							</attributes>
						</configuration>
						<executions>
							<execution>
								<id>generate-pdf-doc</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>process-asciidoc</goal>
								</goals>
								<configuration>
									<backend>pdf</backend>
									<!-- Since 1.5.0-alpha.9 PDF back-end can use 'rouge' as well as 
										'coderay' source highlighting -->
									<sourceHighlighter>rouge</sourceHighlighter>
									<attributes>
										<icons>font</icons>
										<pagenums />
										<toc />
										<idprefix />
										<idseparator>-</idseparator>
									</attributes>
								</configuration>
							</execution>
							<execution>
								<id>asciidoc-to-html</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>process-asciidoc</goal>
								</goals>
								<configuration>
									<backend>html5</backend>
									<sourceHighlighter>coderay</sourceHighlighter>
									<attributes>
										<imagesdir>./images</imagesdir>
										<toc>left</toc>
										<icons>font</icons>
										<sectanchors>true</sectanchors>
										<!-- set the idprefix to blank -->
										<idprefix />
										<idseparator>-</idseparator>
										<docinfo1>true</docinfo1>
									</attributes>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>sonarqube</id>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>0.18.1</version>
						<configuration>
							<machine>
								<name>default</name>
								<autoCreate>true</autoCreate>
								<createOptions>
									<driver>virtualbox</driver>
									<virtualbox-cpu-count>2</virtualbox-cpu-count>
								</createOptions>
							</machine>
							<images>
								<image>
									<name>sonarqube:6.2</name>
									<alias>sonarqube</alias>
									<run>
										<ports>
											<port>sonar-port:9000</port>
										</ports>
										<wait>
											<log>SonarQube is up</log>
											<time>80000</time>
										</wait>
									</run>
								</image>
							</images>
						</configuration>
						<executions>
							<execution>
								<id>prepare-sonar</id>
								<phase>process-resources</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>sonarqube-stop</id>
			<properties>
				<sonar.port>9000</sonar.port>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>0.18.1</version>
						<configuration>
							<machine>
								<name>default</name>
								<autoCreate>true</autoCreate>
								<createOptions>
									<driver>virtualbox</driver>
									<virtualbox-cpu-count>2</virtualbox-cpu-count>
								</createOptions>
							</machine>
							<images>
								<image>
									<name>sonarqube:6.2</name>
									<alias>sonarqube</alias>
									<run>
										<ports>
											<port>${sonar.port}:9000</port>
										</ports>
										<wait>
											<log>SonarQube is up</log>
											<time>80000</time>
										</wait>
									</run>
								</image>
							</images>
						</configuration>
						<executions>
							<execution>
								<id>prepare-sonar</id>
								<phase>process-resources</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<modules>
		<module>api</module>
		<module>core</module>
		<module>rest-api</module>
	</modules>
</project>
